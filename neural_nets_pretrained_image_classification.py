# -*- coding: utf-8 -*-
"""Neural Nets -Pretrained Image Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I3nvIBHD4kL-OHy_2lA4cmtUZaKiinWr
"""

import keras
import numpy as np
import tensorflow as tf
from keras.preprocessing.image import img_to_array,load_img
from keras.applications.inception_resnet_v2 import InceptionResNetV2, decode_predictions,preprocess_input
from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input as preprocess_input_vgg19
from keras.applications.vgg19 import decode_predictions as decode_vgg19
from keras import backend
from tensorflow.keras import backend

from IPython.core.display import display

"""Constants"""

FILE_1='/01 Umbrella.jpg'
FILE_2='/02 Couple.jpg'
FILE_3='/03 Ocean.jpg'

pic=load_img(FILE_2,target_size=(299,299))
display(pic)

pic_array=img_to_array(pic)
# pic_array.shape
expanded=np.expand_dims(pic_array,axis=0)
expanded.shape
preprocessed=preprocess_input(expanded)

"""#Load InceptionResnet"""

inception_model=InceptionResNetV2('imagenet')

inception_model.graph=tf.compat.v1.get_default_graph()

"""#Making Predictions"""

prediction=inception_model.predict(preprocessed)
decode_predictions(prediction)

"""#Challenge"""

def format_img_inceptionresnet(file):
  pic=load_img(file,target_size=(299,299))
  pic_array=img_to_array(pic)
# pic_array.shape
  expanded=np.expand_dims(pic_array,axis=0)
  # expanded.shape
  print(expanded)
  return preprocess_input(expanded)

data=format_img_inceptionresnet(FILE_2)
prediction=inception_model.predict(data)
decode_predictions(prediction)

"""#Testing the VGG model"""

def format_img_VGG19(file):
  pic=load_img(file,target_size=(224,224))
  display(pic)
  pic_array=img_to_array(pic)
# pic_array.shape
  expanded=np.expand_dims(pic_array,axis=0)
  # expanded.shape
  return preprocess_input_vgg19(expanded)
VGG19model=VGG19('imagenet')
VGG19model.graph=tf.compat.v1.get_default_graph()
print(data.shape)
data=format_img_VGG19(FILE_3)
prediction=VGG19model.predict(data)
decode_predictions(prediction)

